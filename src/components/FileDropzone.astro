---
import Card from './Card.astro';
import { filesStore } from '../store/fileStore';
import type { GCodeFile } from '../types/gcode';
import { generateFileItemHTML } from '../utils/file-list-template';
const initialFiles: readonly GCodeFile[] = filesStore.get();
---
<Card title="Upload GCODE Files" className="h-full flex flex-col">
  <div
    id="dropzone"
    class="flex-1 min-h-[400px] flex flex-col border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-center cursor-pointer hover:border-gray-400 dark:hover:border-gray-500 transition-colors"
  >
    <input
      type="file"
      id="file-input"
      accept=".gcode"
      class="hidden"
      multiple
    />
    
    <!-- File List -->
    <div id="file-list" class="flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4 overflow-y-auto">
      {initialFiles.map((file) => (
        <Fragment set:html={generateFileItemHTML(file)} />
      ))}
    </div>

    <!-- Upload Area -->
    <div class="p-8 space-y-2 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50">
      <svg
        class="mx-auto h-12 w-12 text-gray-400"
        stroke="currentColor"
        fill="none"
        viewBox="0 0 48 48"
        aria-hidden="true"
      >
        <path
          d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
      <div class="text-gray-600 dark:text-gray-300">
        <p class="text-base">Drag and drop your GCODE files here</p>
        <p class="text-sm">or</p>
        <button class="mt-2 text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300">
          Browse files
        </button>
      </div>
    </div>

    <!-- Error Message -->
    <div id="error-message" class="text-red-500 dark:text-red-400 text-sm hidden p-2"></div>
  </div>
</Card>

<script>
  import { filesStore, type GCodeFile } from '../store/fileStore';
  import { processFiles } from '../utils/file-handlers';
  import { UI_CONFIG } from '../constants/gcode';
  import { initializeGCodePreview } from '../utils/gcode-preview-handler';
  import { initializeSortable } from '../utils/sortable-handler';
  import { generateFileItemHTML } from '../utils/file-list-template';

  const dropzone = document.getElementById('dropzone');
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const errorMessage = document.getElementById('error-message');
  const fileList = document.getElementById('file-list');

  function updateFileList(files: readonly GCodeFile[]): void {
    if (!fileList) return;
    fileList.innerHTML = files.map(generateFileItemHTML).join('');
    
    // Initialize GCodePreview for each container
    document.querySelectorAll('.file-item').forEach(fileItem => {
      const fileId = fileItem.getAttribute('data-file-id');
      const file = files.find(f => f.id === fileId);
      const container = fileItem.querySelector('.gcode-preview-container');
      if (file && container) {
        initializeGCodePreview(container as HTMLElement, file).catch(console.error);
      }
    });
    initializeSortable(fileList);
  }

  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, UI_CONFIG.ERROR_TIMEOUT);
    }
  }

  if (dropzone && fileInput) {
    const dropzoneActiveClasses = ['border-blue-500', 'bg-blue-50', 'dark:bg-blue-900/10'];

    // Initialize subscription
    filesStore.subscribe(updateFileList);

    // Initialize Sortable on load
    document.addEventListener('astro:page-load', () => {
      if (fileList) {
        initializeSortable(fileList);
      }
    });

    // Handle quantity changes
    document.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      if (target.matches('input[type="number"][data-file-id]')) {
        const fileId = target.dataset.fileId;
        const quantity = parseInt(target.value);
        if (fileId) {
          const files = [...filesStore.get()];
          const newFiles = files.map(file =>
            file.id === fileId ? { ...file, quantity } : file
          );
          filesStore.set(newFiles);
        }
      }
    });

    // Highlight dropzone on drag over
    dropzone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropzone.classList.add(...dropzoneActiveClasses);
    });

    // Remove highlight on drag leave
    dropzone.addEventListener('dragleave', () => {
      dropzone.classList.remove(...dropzoneActiveClasses);
    });

    // Handle file drop
    dropzone.addEventListener('drop', async (e) => {
      e.preventDefault();
      dropzone.classList.remove(...dropzoneActiveClasses);
      if (e.dataTransfer?.files) {
        await processFiles(e.dataTransfer.files, { onError: showError });
      }
    });

    // Handle click to browse
    dropzone.addEventListener('click', (e) => {
      // Only trigger file input if clicking on the upload area or when file list is empty
      const uploadArea = (e.target as HTMLElement).closest('.p-8');
      if (uploadArea || !fileList?.children.length) {
        fileInput.click();
      }
    });

    // Handle file selection through browse
    fileInput.addEventListener('change', async (e) => {
      const target = e.target as HTMLInputElement;
      if (target.files) {
        await processFiles(target.files, { onError: showError });
        // Reset the input to allow uploading the same file again if needed
        target.value = '';
      }
    });
  }
</script>

<style is:global>
  .sortable-fallback {
    @apply pointer-events-none opacity-60;
  }
  .sortable-ghost {
    @apply opacity-40 bg-blue-50 dark:bg-blue-900;
  }
  .sortable-drag {
    @apply cursor-grabbing;
  }
</style>