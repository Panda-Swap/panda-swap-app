---
import Card from './Card.astro';
import { filesStore } from '../store/fileStore';
import type { GCodeFile } from '../types/gcode';
import { generateFileItemHTML } from '../utils/file-list-template';
import { getServerSideLanguage } from '../store/languageStore';
import { useTranslations } from '../i18n/utils';

const currentLang = getServerSideLanguage();
const { t } = useTranslations(currentLang);
const initialFiles: readonly GCodeFile[] = filesStore.get();
---

<Card title={t('fileUpload.title')} className="h-full flex flex-col" data-i18n-key="fileUpload.title">
  <div
    id="dropzone"
    class="flex-1 flex flex-col border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-center transition-all duration-300"
  >
    <input
      type="file"
      id="file-input"
      accept=".gcode"
      class="hidden"
      multiple
    />
    
    {/* File List - Hidden initially */}
    <div id="file-list" class={`flex-1 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4 overflow-y-auto ${initialFiles.length === 0 ? 'hidden' : ''}`}>
      {initialFiles.map((file) => (
        <Fragment set:html={generateFileItemHTML(file)} />
      ))}
    </div>

    {/* Initial large upload area - Only shown when empty */}
    <div id="initial-upload" class={`flex-1 flex items-center justify-center ${initialFiles.length > 0 ? 'hidden' : ''}`}>
      <div class="text-center p-12">
        <svg
          class="mx-auto h-12 w-12 text-gray-400"
          stroke="currentColor"
          fill="none"
          viewBox="0 0 48 48"
          aria-hidden="true"
        >
          <path
            d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <div class="mt-4">
          <p class="text-lg text-gray-600 dark:text-gray-300" data-i18n-key="fileUpload.dragDrop">
            {t('fileUpload.dragDrop')}
          </p>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1" data-i18n-key="fileUpload.or">
            {t('fileUpload.or')}
          </p>
          <button class="mt-2 text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300">
            {t('fileUpload.browse')}
          </button>
        </div>
      </div>
    </div>

    {/* Permanent bottom upload bar */}
    <div class={`p-4 space-y-2 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800/50 ${initialFiles.length === 0 ? 'hidden' : ''}`}>
      <div class="flex items-center justify-center gap-3">
        <svg
          class="h-6 w-6 text-gray-400"
          stroke="currentColor"
          fill="none"
          viewBox="0 0 48 48"
          aria-hidden="true"
        >
          <path
            d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <span class="text-gray-600 dark:text-gray-300" data-i18n-key="fileUpload.dragDrop">
          {t('fileUpload.dragDrop')}
        </span>
        <span class="text-gray-600 dark:text-gray-300" data-i18n-key="fileUpload.or">
          {t('fileUpload.or')}
        </span>
        <button class="text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300">
          {t('fileUpload.browse')}
        </button>
      </div>
    </div>

    {/* Error Message */}
    <div id="error-message" class="text-red-500 dark:text-red-400 text-sm hidden p-2"></div>
  </div>
</Card>

<script>
  import { filesStore, type GCodeFile } from '../store/fileStore';
  import { processFiles } from '../utils/file-handlers';
  import { UI_CONFIG } from '../types/gcode';
  import { initializeGCodePreview } from '../utils/gcode-preview-handler';
  import { initializeSortable } from '../utils/sortable-handler';
  import { generateFileItemHTML } from '../utils/file-list-template';
  import { setupTranslationObservers } from '../utils/translations-handlers';

  const dropzone = document.getElementById('dropzone');
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const errorMessage = document.getElementById('error-message');
  const fileList = document.getElementById('file-list');
  const initialUpload = document.getElementById('initial-upload');
  const bottomUpload = document.querySelector('.p-4.space-y-2.border-t');

  function updateFileList(files: readonly GCodeFile[]): void {
  if (!fileList || !initialUpload || !bottomUpload) return;
  
  // Toggle visibility of elements based on files
  fileList.classList.toggle('hidden', files.length === 0);
  initialUpload.classList.toggle('hidden', files.length > 0);
  bottomUpload.classList.toggle('hidden', files.length === 0);
  
  // Update file list content with current language
  fileList.innerHTML = files
    .map((file) => generateFileItemHTML(file))
    .join('');
  
  // Initialize GCodePreview for each container
  document.querySelectorAll('.file-item').forEach(fileItem => {
    const fileId = fileItem.getAttribute('data-file-id');
    const file = files.find(f => f.id === fileId);
    const container = fileItem.querySelector('.gcode-preview-container');
    if (file && container) {
      initializeGCodePreview(container as HTMLElement, file).catch(console.error);
    }
  });
  
  if (files.length > 0) {
    initializeSortable(fileList);
  }
}

  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
      setTimeout(() => {
        errorMessage.classList.add('hidden');
      }, UI_CONFIG.ERROR_TIMEOUT);
    }
  }

  if (dropzone && fileInput) {
    const dropzoneActiveClasses = ['border-blue-500', 'bg-blue-50', 'dark:bg-blue-900/10'];

    // Initialize subscription
    filesStore.subscribe(updateFileList);

    // Initialize Sortable on load and setup translations
    document.addEventListener('astro:page-load', () => {
      setupTranslationObservers();
      if (fileList && filesStore.get().length > 0) {
        initializeSortable(fileList);
      }
    });

    // Handle quantity changes
    document.addEventListener('change', (e: Event) => {
      const target = e.target as HTMLInputElement;
      if (target.matches('input[type="number"][data-file-id]')) {
        const fileId = target.dataset.fileId;
        const quantity = parseInt(target.value);
        if (fileId) {
          const files = [...filesStore.get()];
          const newFiles = files.map(file =>
            file.id === fileId ? { ...file, quantity } : file
          );
          filesStore.set(newFiles);
        }
      }
    });

    // Highlight dropzone on drag over
    dropzone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropzone.classList.add(...dropzoneActiveClasses);
    });

    // Remove highlight on drag leave
    dropzone.addEventListener('dragleave', () => {
      dropzone.classList.remove(...dropzoneActiveClasses);
    });

    // Handle file drop
    dropzone.addEventListener('drop', async (e) => {
      e.preventDefault();
      dropzone.classList.remove(...dropzoneActiveClasses);
      if (e.dataTransfer?.files) {
        await processFiles(e.dataTransfer.files, { onError: showError });
      }
    });

    // Handle click to browse
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (target.tagName === 'BUTTON' && target.textContent?.includes('Browse files')) {
        fileInput.click();
      }
    });

    // Handle file selection through browse
    fileInput.addEventListener('change', async (e) => {
      const target = e.target as HTMLInputElement;
      if (target.files) {
        await processFiles(target.files, { onError: showError });
        target.value = '';
      }
    });
  }
</script>

<style is:global>
  .sortable-fallback {
    @apply pointer-events-none opacity-60;
  }
  .sortable-ghost {
    @apply opacity-40 bg-blue-50 dark:bg-blue-900;
  }
  .sortable-drag {
    @apply cursor-grabbing;
  }
</style>