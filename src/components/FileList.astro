---
import Card from './Card.astro';
import { filesStore } from '../store/fileStore';
import type { GCodeFile } from '../types/gcode';
import { generateFileItemHTML } from '../utils/file-list-template';

const initialFiles: readonly GCodeFile[] = filesStore.get();
---

<!-- File List -->
<div id="file-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4">
  {initialFiles.map((file) => (
    <Fragment set:html={generateFileItemHTML(file)} />
  ))}
</div>

<script>
  import { filesStore, type GCodeFile } from '../store/fileStore';
  import { initializeGCodePreview } from '../utils/gcode-preview-handler';
  import { initializeSortable } from '../utils/sortable-handler';
  import { generateFileItemHTML } from '../utils/file-list-template';

  function updateFileList(files: readonly GCodeFile[]): void {
    const fileList = document.getElementById('file-list');
    if (!fileList) return;

    fileList.innerHTML = files.map(generateFileItemHTML).join('');

    // Initialize GCodePreview for each container
    document.querySelectorAll('.file-item').forEach(fileItem => {
      const fileId = fileItem.getAttribute('data-file-id');
      const file = files.find(f => f.id === fileId);
      const container = fileItem.querySelector('.gcode-preview-container');
      
      if (file && container) {
        initializeGCodePreview(container as HTMLElement, file).catch(console.error);
      }
    });

    initializeSortable(fileList);
  }

  // Initialize subscription
  filesStore.subscribe(updateFileList);

  // Initialize Sortable on load
  document.addEventListener('astro:page-load', () => {
    const fileList = document.getElementById('file-list');
    if (fileList) {
      initializeSortable(fileList);
    }
  });

  // Handle quantity changes
  document.addEventListener('change', (e: Event) => {
    const target = e.target as HTMLInputElement;
    if (target.matches('input[type="number"][data-file-id]')) {
      const fileId = target.dataset.fileId;
      const quantity = parseInt(target.value);
      
      if (fileId) {
        const files = [...filesStore.get()];
        const newFiles = files.map(file => 
          file.id === fileId ? { ...file, quantity } : file
        );
        filesStore.set(newFiles);
      }
    }
  });
</script>

<style is:global>
  .sortable-fallback {
    @apply pointer-events-none opacity-60;
  }
  
  .sortable-ghost {
    @apply opacity-40 bg-blue-50 dark:bg-blue-900;
  }

  .sortable-drag {
    @apply cursor-grabbing;
  }
</style>