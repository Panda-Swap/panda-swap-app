---
import Card from './Card.astro';
import { filesStore } from '../store/fileStore';
import type { GCodeFile } from '../types/gcode';
import { generateFileItemHTML } from '../utils/file-list-template';
const initialFiles: readonly GCodeFile[] = filesStore.get();
---
<!-- File List -->
<div id="file-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4">
  {initialFiles.map((file) => (
    <Fragment set:html={generateFileItemHTML(file)} />
  ))}
</div>

<script>
import { filesStore, type GCodeFile } from '../store/fileStore';
import { generateFileItemHTML } from '../utils/file-list-template';
import { initializeGCodePreview } from '../utils/gcode-preview-handler';
import Sortable from 'sortablejs';

function updateFileList(files: readonly GCodeFile[]): void {
  const fileList = document.getElementById('file-list');
  if (!fileList) return;

  fileList.innerHTML = files.map(generateFileItemHTML).join('');

  // Initialize GCodePreview for each container
  document.querySelectorAll('.file-item').forEach(fileItem => {
    const fileId = fileItem.getAttribute('data-file-id');
    const file = files.find(f => f.id === fileId);
    const container = fileItem.querySelector('.gcode-preview-container');
    if (file && container) {
      initializeGCodePreview(container as HTMLElement, file).catch(console.error);
    }
  });

  // Reinitialize Sortable
  initializeSortable(fileList);
}

function initializeSortable(element: HTMLElement) {
  new Sortable(element, {
    animation: 150, // Faster animation
    easing: "cubic-bezier(0.2, 0, 0.2, 1)",
    draggable: ".file-item",
    handle: ".drag-handle",
    dragClass: "sortable-drag",
    ghostClass: "sortable-ghost",
    chosenClass: "sortable-chosen",
    forceFallback: false,
    fallbackTolerance: 0,
    scrollSpeed: 40,
    scrollSensitivity: 150,
    delay: 0, // Remove delay for instant response
    delayOnTouchOnly: true,
    touchStartThreshold: 1,
    
    // Optimize store updates
    onEnd: function(evt) {
      const files = [...filesStore.get()];
      const item = files[evt.oldIndex!];
      files.splice(evt.oldIndex!, 1);
      files.splice(evt.newIndex!, 0, item);
      
      // Batch update to prevent multiple rerenders
      requestAnimationFrame(() => {
        filesStore.set(files);
      });
    }
  });
}
// Initialize subscription
filesStore.subscribe(updateFileList);

// Initialize Sortable on page load
document.addEventListener('astro:page-load', () => {
  const fileList = document.getElementById('file-list');
  if (fileList) {
    initializeSortable(fileList);
  }
});

// Handle quantity changes
document.addEventListener('change', (e: Event) => {
  const target = e.target as HTMLInputElement;
  if (target.matches('input[type="number"][data-file-id]')) {
    const fileId = target.dataset.fileId;
    const quantity = parseInt(target.value);
    if (fileId) {
      const files = [...filesStore.get()];
      const newFiles = files.map(file =>
        file.id === fileId ? { ...file, quantity } : file
      );
      filesStore.set(newFiles);
    }
  }
});
</script>

<style is:global>
.sortable-ghost {
  opacity: 0.6;
  background-color: rgba(59, 130, 246, 0.1);
}

.sortable-drag {
  cursor: grabbing !important;
  opacity: 1;
  position: relative;
  z-index: 1000;
  transform-origin: 50% 50%;
}

.sortable-chosen {
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.file-item {
  transition: transform 150ms ease, box-shadow 150ms ease;
  will-change: transform, box-shadow;
}

/* Optional: only if you want hover effects */
.file-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

/* Ensure proper cursor on drag handle if you have one */
.drag-handle {
  cursor: grab;
}
</style>