---
import Card from './Card.astro';
import { filesStore } from '../store/fileStore';
---

<Card title="Upload GCODE Files">
  <div
    id="dropzone"
    class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:border-gray-400 dark:hover:border-gray-500 transition-colors"
  >
    <input
      type="file"
      id="file-input"
      accept=".gcode"
      class="hidden"
      multiple
    />
    <div class="space-y-2">
      <svg
        class="mx-auto h-12 w-12 text-gray-400"
        stroke="currentColor"
        fill="none"
        viewBox="0 0 48 48"
        aria-hidden="true"
      >
        <path
          d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        />
      </svg>
      <div class="text-gray-600 dark:text-gray-300">
        <p class="text-base">Drag and drop your GCODE files here</p>
        <p class="text-sm">or</p>
        <button class="mt-2 text-blue-500 hover:text-blue-600 dark:text-blue-400 dark:hover:text-blue-300">
          Browse files
        </button>
      </div>
    </div>
  </div>
</Card>

<script>
  import { filesStore } from '../store/fileStore';
  import { parseGCodeFile } from '../utils/gcodeParser';

  const dropzone = document.getElementById('dropzone');
  const fileInput = document.getElementById('file-input') as HTMLInputElement;

  async function handleFiles(fileList: FileList) {
    const files = Array.from(fileList);
    
    for (const file of files) {
      try {
        const content = await file.text();
        const metadata = parseGCodeFile(content, file.name); // Pass the filename
        
        const newFile = {
          id: crypto.randomUUID(),
          name: file.name,
          content,
          quantity: 1,
          metadata
        };
        
        filesStore.set([...filesStore.get(), newFile]);
      } catch (error) {
        console.error(`Error processing file ${file.name}:`, error);
      }
    }
  }

  if (dropzone && fileInput) {
    dropzone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropzone.classList.add('border-blue-500', 'bg-blue-50', 'dark:bg-blue-900/10');
    });

    dropzone.addEventListener('dragleave', () => {
      dropzone.classList.remove('border-blue-500', 'bg-blue-50', 'dark:bg-blue-900/10');
    });

    dropzone.addEventListener('drop', async (e) => {
      e.preventDefault();
      dropzone.classList.remove('border-blue-500', 'bg-blue-50', 'dark:bg-blue-900/10');
      
      if (e.dataTransfer?.files) {
        await handleFiles(e.dataTransfer.files);
      }
    });

    dropzone.addEventListener('click', () => {
      fileInput.click();
    });

    fileInput.addEventListener('change', async (e) => {
      const target = e.target as HTMLInputElement;
      if (target.files) {
        await handleFiles(target.files);
      }
    });
  }
</script>