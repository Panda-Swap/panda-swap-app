---
import Card from './Card.astro';
import GCodePreview from './GCodePreview.astro';

interface Color {
  color: string;
  weight: number;
}

interface Props {
  plateName: string;
  colors: Color[];
  totalTime: number;
  estimatedTime: number;
  gcode: string;
}

const { plateName, colors, totalTime, estimatedTime, gcode } = Astro.props;

function formatTime(minutes: number) {
  const hours = Math.floor(minutes / 60);
  const mins = Math.round(minutes % 60);
  return `${hours}h ${mins}m`;
}

const usedColors = colors.filter(color => color.weight > 0);
const totalWeight = usedColors.reduce((sum, color) => sum + color.weight, 0);
const colorsWithPercentage = usedColors.map(color => ({
  ...color,
  percentage: (color.weight / totalWeight * 100).toFixed(1),
}));

---

<Card title={plateName}>
  <div class="mb-6">
    <GCodePreview gcode={gcode} />
  </div>
  
  <div class="space-y-4">
    <div>
      <div class="flex justify-between items-center mb-2">
        <h4 class="font-medium text-gray-700 dark:text-gray-300">Filament Usage:</h4>
        <span class="text-sm text-gray-500 dark:text-gray-400">
          Total: {totalWeight.toFixed(2)}g
        </span>
      </div>
      
      {colorsWithPercentage.length > 0 ? (
        <ul class="space-y-2">
          {colorsWithPercentage.map(({ color, weight, percentage }) => (
            <li class="relative">
              <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded">
                <div class="flex items-center gap-3 z-10">
                  <div class="relative group">
                    <div
                      class="w-8 h-8 rounded-full border border-gray-200 dark:border-gray-600 flex items-center justify-center text-xs font-mono transition-all duration-200"
                      style={`background-color: ${color};`}
                    >
                      <span class="opacity-0 group-hover:opacity-100 transition-opacity">
                        {color}
                      </span>
                    </div>
                    <div class="absolute left-1/2 -translate-x-1/2 -bottom-1 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap">
                      {color}
                    </div>
                  </div>
                </div>
                <div class="flex gap-4 z-10">
                  <span class="text-gray-600 dark:text-gray-300">{weight.toFixed(2)}g</span>
                  <span class="text-gray-500 dark:text-gray-400 w-16 text-right">
                    {percentage}%
                  </span>
                </div>
                <div 
                  class="absolute left-0 top-0 h-full bg-gray-100 dark:bg-gray-600 rounded opacity-50"
                  style={`width: ${percentage}%`}
                />
              </div>
            </li>
          ))}
        </ul>
      ) : (
        <p class="text-gray-500 dark:text-gray-400 italic">
          No filament usage data available
        </p>
      )}
    </div>

    <div class="grid grid-cols-2 gap-4">
      <div>
        <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Print Time:</h4>
        <div class="flex flex-col">
          <p class="text-gray-600 dark:text-gray-400">
            {formatTime(totalTime)}
          </p>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            (model only)
          </p>
        </div>
      </div>
      <div>
        <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Total Time:</h4>
        <div class="flex flex-col">
          <p class="text-gray-600 dark:text-gray-400">
            {formatTime(estimatedTime)}
          </p>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            (includes setup)
          </p>
        </div>
      </div>
    </div>
  </div>
</Card>