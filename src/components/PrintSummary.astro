---
import { filesStore } from '../store/fileStore';
import { settingsStore } from '../store/settings-store';
import type { GCodeFile } from '../types/gcode';
import { calculatePrinterModels, calculateTotalTime } from '../utils/gcode-helpers';
import { getCurrentLanguage, useTranslations } from '../i18n/utils';

const { t } = useTranslations(getCurrentLanguage());
const initialFiles: readonly GCodeFile[] = filesStore.get();
const settings = settingsStore.get();
const totalTime = calculateTotalTime(initialFiles);
const printerModels = calculatePrinterModels(initialFiles);
const formattedTime = `${Math.floor(totalTime / 60)}h ${Math.round(totalTime % 60)}m`;

// Pre-compute initial translations for SSR
const initialTotalTimeText = t('printSummary.totalPrintTime', { time: formattedTime });
const initialPrinterText = printerModels.length === 1 
  ? t('printSummary.printer.single', { name: printerModels[0] })
  : t('printSummary.printer.multiple', { names: printerModels.join(', ') });
---

<div id="print-summary" class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4">
  <div class="flex justify-between items-start mb-4">
    <div>
      <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100" data-i18n="printSummary.title"></h3>
      <div id="total-cost" class="text-sm text-gray-600 dark:text-gray-400 mt-1"></div>
    </div>
    <button
      id="compile-button"
      class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors duration-200 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={initialFiles.length === 0}
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5zm11 1H6v8l4-2 4 2V6z" clip-rule="evenodd"/>
      </svg>
      <span data-i18n="printSummary.compileGcode"></span>
    </button>
  </div>
  <div class="grid grid-cols-1 gap-6">
    <div>
      <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" id="total-time">
        {initialTotalTimeText}
      </h4>
      <div id="printer-models" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        {printerModels.length > 0 && initialPrinterText}
      </div>
      <div class="space-y-2 mt-4" id="total-usage"></div>
    </div>
  </div>
</div>

<script>
  import { filesStore } from '../store/fileStore';
  import { settingsStore } from '../store/settings-store';
  import { getCurrentLanguage, useTranslations } from '../i18n/utils';
  import type { GCodeFile } from '../types/gcode';
  import { compileGCode, downloadGCode, calculatePrinterModels, calculateTotalTime, formatTime } from '../utils/gcode-helpers';
  import tinycolor from 'tinycolor2';

  // Initialize translations
  function initializeTranslations() {
    const { t } = useTranslations(getCurrentLanguage());
    document.querySelectorAll('[data-i18n]').forEach(element => {
      const key = element.getAttribute('data-i18n');
      if (key) element.textContent = t(key);
    });
  }

  function updateSummary(files: readonly GCodeFile[]): void {
    const { t } = useTranslations(getCurrentLanguage());
    const totalUsageElement = document.getElementById('total-usage');
    const compileButton = document.getElementById('compile-button') as HTMLButtonElement;
    const printerModelsElement = document.getElementById('printer-models');
    const totalCostElement = document.getElementById('total-cost');
    const settings = settingsStore.get();
    
    if (!totalUsageElement || !compileButton || !printerModelsElement || !totalCostElement) return;

    compileButton.disabled = files.length === 0;

    // Calculate totals per color across all files
    const totals = files.reduce((acc, file) => {
      file.metadata.colors.forEach(({ color, weight, cost, filament_type }, index) => {
        const slotKey = t('printSummary.filament.slot', { number: index + 1 });
        if (!acc[slotKey]) {
          acc[slotKey] = { color, weight: 0, cost: 0, filament_type };
        }
        acc[slotKey].weight += weight * file.quantity;
        acc[slotKey].cost += cost * file.quantity;
      });
      return acc;
    }, {} as Record<string, { color: string; weight: number; cost: number; filament_type: string; }>);

    // Filter out empty slots if hideEmptyFilaments is true
    const filteredTotals = settings.display.hideEmptyFilaments
      ? Object.entries(totals).filter(([_, data]) => data.weight > 0)
      : Object.entries(totals);

    // Calculate and display total cost if enabled
    if (settings.display.showTotalCost) {
      const totalCost = Object.values(totals).reduce((sum, { cost }) => sum + cost, 0);
      totalCostElement.textContent = t('printSummary.totalCost', { cost: totalCost.toFixed(2) });
    } else {
      totalCostElement.textContent = '';
    }

    // Update printer models display
    const printerModels = calculatePrinterModels(files);
    if (printerModels.length > 0) {
      printerModelsElement.textContent = printerModels.length === 1
        ? t('printSummary.printer.single', { name: printerModels[0] })
        : t('printSummary.printer.multiple', { names: printerModels.join(', ') });
      printerModelsElement.classList.remove('hidden');
    } else {
      printerModelsElement.textContent = '';
      printerModelsElement.classList.add('hidden');
    }

    // Update the summary HTML based on compact mode
    if (settings.display.compactMode) {
      totalUsageElement.innerHTML = `
        <div class="space-y-4">
          <div class="flex flex-wrap gap-2 justify-start">
            ${filteredTotals.map(([_, { color }]) => {
              const tc = tinycolor(color);
              const displayColor = tc.toString('hex');
              const textColor = tc.isLight() ? '#000000' : '#FFFFFF';
              return `
                <div class="relative group">
                  <div
                    class="w-8 h-8 rounded-full border border-gray-200 dark:border-gray-600 flex items-center justify-center text-xs font-mono transition-all duration-200"
                    style="background-color: ${displayColor}; color: ${textColor}"
                  >
                    <span class="opacity-0 group-hover:opacity-100 transition-opacity">
                      ${displayColor}
                    </span>
                  </div>
                  <div class="absolute left-1/2 -translate-x-1/2 -bottom-1 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap">
                    ${displayColor}
                  </div>
                </div>
              `;
            }).join('')}
          </div>
          <div class="space-y-2">
            ${filteredTotals.map(([slotKey, { filament_type, weight, cost }]) => `
              <div class="p-2 bg-gray-50 dark:bg-gray-700 rounded">
                <span class="font-medium">${slotKey}</span>
                <div class="text-sm text-gray-600 dark:text-gray-300">
                  ${filament_type} - 
                  ${t('printSummary.filament.weight', { amount: weight.toFixed(2) })} - 
                  ${t('printSummary.filament.cost', { amount: cost.toFixed(2) })}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
    } else {
      totalUsageElement.innerHTML = filteredTotals
        .map(([slotKey, { color, weight, cost, filament_type }]) => {
          const tc = tinycolor(color);
          const displayColor = tc.toString('hex');
          const textColor = tc.isLight() ? '#000000' : '#FFFFFF';
          return `
            <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded">
              <div class="flex items-center gap-3">
                <div class="relative group">
                  <div
                    class="w-8 h-8 rounded-full border border-gray-200 dark:border-gray-600 flex items-center justify-center text-xs font-mono transition-all duration-200"
                    style="background-color: ${displayColor}; color: ${textColor}"
                  >
                    <span class="opacity-0 group-hover:opacity-100 transition-opacity">
                      ${displayColor}
                    </span>
                  </div>
                  <div class="absolute left-1/2 -translate-x-1/2 -bottom-1 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap">
                    ${displayColor}
                  </div>
                </div>
                <div>
                  <span class="font-medium">${slotKey}</span>
                  <div class="text-sm text-gray-600 dark:text-gray-300">
                    ${filament_type}
                  </div>
                </div>
                <div>
                  <div class="text-sm text-gray-600 dark:text-gray-300">
                    ${t('printSummary.filament.weight', { amount: weight.toFixed(2) })}
                  </div>
                  <div class="text-sm text-gray-600 dark:text-gray-300">
                    ${t('printSummary.filament.cost', { amount: cost.toFixed(2) })}
                  </div>
                </div>
              </div>
            </div>
          `;
        })
        .join('');
    }

    // Update total time
    const totalTime = calculateTotalTime(files);
    const totalTimeElement = document.querySelector('#total-time');
    if (totalTimeElement) {
        const formattedTime = formatTime(totalTime);
        totalTimeElement.textContent = t('printSummary.totalPrintTime', { time: formattedTime });
    }
  }

  // Initialize translations on load
  initializeTranslations();

  // Update translations when language changes
  window.addEventListener('language-change', () => {
    initializeTranslations();
    updateSummary(filesStore.get());
  });

  // Initialize subscriptions
  filesStore.subscribe(updateSummary);
  settingsStore.subscribe(() => updateSummary(filesStore.get()));

  // Handle compile button click
  document.getElementById('compile-button')?.addEventListener('click', () => {
    const files = filesStore.get();
    if (files.length > 0) {
      const compiledGCode = compileGCode(files);
      downloadGCode(compiledGCode);
    }
  });

  // Handle quantity changes
  document.addEventListener('change', (e: Event) => {
    const target = e.target as HTMLInputElement;
    if (target.matches('input[type="number"][data-file-id]')) {
      const fileId = target.dataset.fileId;
      const quantity = parseInt(target.value);
      
      if (fileId) {
        const files = [...filesStore.get()];
        const newFiles = files.map(file => 
          file.id === fileId ? { ...file, quantity } : file
        );
        filesStore.set(newFiles);
      }
    }
  });
</script>