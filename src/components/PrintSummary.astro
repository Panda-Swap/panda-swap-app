---
import { filesStore } from '../store/fileStore';
import type { GCodeFile } from '../types/gcode';
import { calculatePrinterModels, calculateTotalTime } from '../utils/gcode-helpers';

const initialFiles: readonly GCodeFile[] = filesStore.get();
const totalTime = calculateTotalTime(initialFiles);
const printerModels = calculatePrinterModels(initialFiles);
---

<!-- Summary Card -->
<div id="print-summary" class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4">
  <div class="flex justify-between items-start mb-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Print Job Summary</h3>
    <button
      id="compile-button"
      class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors duration-200 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled={initialFiles.length === 0}
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M3 5a2 2 0 012-2h10a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2V5zm11 1H6v8l4-2 4 2V6z" clip-rule="evenodd"/>
      </svg>
      Compile GCode
    </button>
  </div>
  <div class="grid grid-cols-1 gap-6">
    <div>
      <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        Total Print Time: {Math.floor(totalTime / 60)}h {Math.round(totalTime % 60)}m
      </h4>
      <div id="printer-models" class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
        {printerModels.length > 0 && (
          `Printer${printerModels.length > 1 ? 's' : ''}: ${printerModels.join(', ')}`
        )}
      </div>
      <div class="space-y-2 mt-4" id="total-usage"></div>
    </div>
  </div>
</div>

<script>
  import { filesStore } from '../store/fileStore';
  import type { GCodeFile } from '../types/gcode';
  import { compileGCode, downloadGCode, calculatePrinterModels, calculateTotalTime, formatTime } from '../utils/gcode-helpers';
  import tinycolor from 'tinycolor2';

  function updateSummary(files: readonly GCodeFile[]): void {
    const totalUsageElement = document.getElementById('total-usage');
    const compileButton = document.getElementById('compile-button');
    const printerModelsElement = document.getElementById('printer-models');
    
    if (!totalUsageElement || !compileButton || !printerModelsElement) return;

    // Update compile button state
    compileButton.disabled = files.length === 0;

    // Calculate totals per color across all files
    const totals = files.reduce((acc, file) => {
      file.metadata.colors.forEach(({ color, weight, cost, filament_type }, index) => {
        const slotKey = `Slot ${index + 1}`;
        if (!acc[slotKey]) {
          acc[slotKey] = { color, weight: 0, cost: 0, filament_type };
        }
        acc[slotKey].weight += weight * file.quantity;
        acc[slotKey].cost += cost * file.quantity;
      });
      return acc;
    }, {} as Record<string, { color: string; weight: number; cost: number; filament_type: string; }>);

    // Update printer models display
    const printerModels = calculatePrinterModels(files);
    if (printerModels.length > 0) {
      printerModelsElement.textContent = `Printer${printerModels.length > 1 ? 's' : ''}: ${printerModels.join(', ')}`;
      printerModelsElement.classList.remove('hidden');
    } else {
      printerModelsElement.textContent = '';
      printerModelsElement.classList.add('hidden');
    }

    // Update the summary HTML
    totalUsageElement.innerHTML = Object.entries(totals)
      .map(([slotKey, { color, weight, cost, filament_type }]) => {
        const tc = tinycolor(color);
        const displayColor = tc.toString('hex');
        const textColor = tc.isLight() ? '#000000' : '#FFFFFF';
        return `
          <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded">
            <div class="flex items-center gap-3">
              <div class="relative group">
                <div
                  class="w-8 h-8 rounded-full border border-gray-200 dark:border-gray-600 flex items-center justify-center text-xs font-mono transition-all duration-200"
                  style="background-color: ${displayColor}; color: ${textColor}"
                >
                  <span class="opacity-0 group-hover:opacity-100 transition-opacity">
                    ${displayColor}
                  </span>
                </div>
                <div class="absolute left-1/2 -translate-x-1/2 -bottom-1 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap">
                  ${displayColor}
                </div>
              </div>
              <div>
                <span class="font-medium">${slotKey}</span>
                <div class="text-sm text-gray-600 dark:text-gray-300">
                  ${filament_type}
                </div>
              </div>
              <div>
                <div class="text-sm text-gray-600 dark:text-gray-300">
                  Weight: ${weight.toFixed(2)}g
                </div>
                <div class="text-sm text-gray-600 dark:text-gray-300">
                  Cost: $${cost.toFixed(2)}
                </div>
              </div>
            </div>
          </div>
        `;
      })
      .join('');

    // Update total time
    const totalTime = calculateTotalTime(files);
    const totalTimeElement = document.querySelector('#print-summary h4');
    if (totalTimeElement) {
      totalTimeElement.textContent = `Total Print Time: ${formatTime(totalTime)}`;
    }
  }

  // Initialize subscription
  filesStore.subscribe(updateSummary);

  // Handle compile button click
  document.getElementById('compile-button')?.addEventListener('click', () => {
    const files = filesStore.get();
    if (files.length > 0) {
      const compiledGCode = compileGCode(files);
      downloadGCode(compiledGCode);
    }
  });

  // Handle quantity changes
  document.addEventListener('change', (e: Event) => {
    const target = e.target as HTMLInputElement;
    if (target.matches('input[type="number"][data-file-id]')) {
      const fileId = target.dataset.fileId;
      const quantity = parseInt(target.value);
      
      if (fileId) {
        const files = [...filesStore.get()];
        const newFiles = files.map(file => 
          file.id === fileId ? { ...file, quantity } : file
        );
        filesStore.set(newFiles);
      }
    }
  });
</script>