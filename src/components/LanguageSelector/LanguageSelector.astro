---
import { getServerSideLanguage } from '../../store/language-store';
import { useTranslations, getAvailableLanguages, getCurrentLanguage } from '../../i18n/utils';
import LanguageButton from './LanguageButton.astro';
import LanguageDropdown from './LanguageDropDown.astro';

// Use server-side safe language getter
const currentLang = getCurrentLanguage();
const { t } = useTranslations(currentLang);
const availableLanguages = getAvailableLanguages();
---

<div class="relative" id="language-selector-root">
<LanguageButton
  currentLang={currentLang}
  label={t('common.language')}
/>
<LanguageDropdown
  languages={availableLanguages}
  currentLang={currentLang}
/>
</div>

<script>
import { languageStore } from '../../store/language-store.ts';
import { setupLanguageHandlers } from '../../utils/i18n/language-handlers.ts';
import { setLanguage } from '../../i18n/utils';

function updateContent() {
  const root = document.getElementById('language-selector-root');
  if (!root) return;
  
  const currentLang = languageStore.get();
  root.setAttribute('data-current-lang', currentLang);
  
  // Update dropdown button highlighting
  const buttons = document.querySelectorAll('#language-dropdown button');
  buttons.forEach(button => {
    const lang = button.getAttribute('data-lang');
    if (lang === currentLang) {
      button.classList.add('text-gray-900', 'dark:text-white', 'font-medium', 'bg-gray-50', 'dark:bg-gray-700');
      button.classList.remove('text-gray-700', 'dark:text-gray-300');
    } else {
      button.classList.remove('text-gray-900', 'dark:text-white', 'font-medium', 'bg-gray-50', 'dark:bg-gray-700');
      button.classList.add('text-gray-700', 'dark:text-gray-300');
    }
  });
}

function triggerTranslationUpdate(lang: string) {
  // Dispatch multiple events to ensure translation updates
  window.dispatchEvent(new CustomEvent('language-change', {
    detail: { language: lang }
  }));
  
  window.dispatchEvent(new CustomEvent('translation-update', {
    detail: { language: lang }
  }));
}

// Initialize language handlers
setupLanguageHandlers(
  'language-select',
  'language-dropdown',
  async (lang) => {
    console.log('Language handler triggered with:', lang);
    
    // Set the new language
    setLanguage(lang);
    
    // Update content and trigger translation updates
    updateContent();
    triggerTranslationUpdate(lang);
    
    // Dispatch custom event for other components
    window.dispatchEvent(
      new CustomEvent('language-change', {
        detail: { language: lang }
      })
    );
    
    // Reload to ensure all translations are updated
    location.reload();
  }
);

// Set up initial state
document.addEventListener('astro:page-load', () => {
  updateContent();
});

// Listen for language changes in the store
languageStore.subscribe((lang) => {
  updateContent();
  triggerTranslationUpdate(lang);
});
</script>