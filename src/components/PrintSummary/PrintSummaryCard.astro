---
import CompileButton from './CompileButton.astro';
import FilamentUsage from './FilamentUsage.astro';
import PrinterInfo from './PrinterInfo.astro';
import TotalStats from './TotalStats.astro';
import Label from './Label.astro';
import { filesStore } from '../../store/file-store';
import { settingsStore } from '../../store/settings-store';
import { languageStore } from '../../store/language-store';
import { getCurrentLanguage, useTranslations, getAvailableLanguages } from '../../i18n/utils';

const files = filesStore.get();
const settings = settingsStore.get();

interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
const lang = getCurrentLanguage();
const translations = useTranslations(lang);
const availableLanguages = getAvailableLanguages();

// Helper function to translate
const t = (key: string) => translations.t(key);
---

<div 
  class={`bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 ${className}`}
  id="print-summary-card"
  data-initial-lang={lang}
>
  <div class="space-y-6">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="space-y-4">
        <div class="space-y-2">
          <Label 
            for="custom-name-input" 
            id="export-name-label"
            data-i18n-key="printSummary.exportName"
          >{t('printSummary.exportName')}</Label>
          <input 
            type="text" 
            id="custom-name-input" 
            data-i18n-key="printSummary.exportNamePlaceholder"
            placeholder={t('printSummary.exportNamePlaceholder')}
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm 
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 
                   dark:bg-gray-700 dark:text-white placeholder-gray-400 dark:placeholder-gray-300"
          />
          <p 
            id="export-name-tips" 
            class="text-sm text-gray-500 dark:text-gray-400" 
            data-i18n-key="printSummary.exportNameTips"
          >
            {t('printSummary.exportNameTips')}
          </p>
        </div>

        <div class="space-y-2">
          <Label 
            for="thumbnail-input" 
            id="thumbnail-label"
            data-i18n-key="printSummary.thumbnail"
          >{t('printSummary.thumbnail')}</Label>

          <div class="flex items-center gap-4">
            <div 
            id="thumbnail-preview" 
            class="w-32 h-32 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg 
                   flex items-center justify-center bg-gray-50 dark:bg-gray-700 overflow-hidden"
          >
            <img 
              id="preview-image"
              src=""
              alt="Thumbnail preview"
              class="hidden max-w-full max-h-full object-contain"
            />
            <svg 
              id="placeholder-icon"
              class="w-8 h-8 text-gray-400 dark:text-gray-500" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24" 
              xmlns="http://www.w3.org/2000/svg"
            >
              <path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
              >
              </path>
            </svg>
          </div>
            <div class="space-y-2 flex-1 center flex flex-col">
              <button
              type="button"
              id="thumbnail-button"
              class="inline-flex items-center justify-center w-full px-4 py-2 rounded-md text-sm font-semibold
                bg-blue-50 text-blue-700 hover:bg-blue-100
                dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600
                transition-colors duration-200 ease-in-out
                focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                dark:focus:ring-offset-gray-800"
              aria-controls="thumbnail-input"
            >
              <span translate="yes" data-i18n-key="fileUpload.browse">{t('fileUpload.browse')}</span>
            </button>
              <input
                type="file"
                id="thumbnail-input"
                accept="image/*"
                class="sr-only"
                aria-label={t('printSummary.thumbnailInput')}
              />
              
              <p class="text-sm text-gray-500 dark:text-gray-400" data-i18n-key="printSummary.thumbnailTips">
                {t('printSummary.thumbnailTips')}
              </p>
            </div>
            
          </div>
        </div>

        <div 
          id="image-error" 
          class="hidden p-4 bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 
                 rounded-md text-red-700 dark:text-red-300"
          data-i18n-key="printSummary.thumbnailError"
        >
        {t('printSummary.thumbnailError')}
        </div>
      </div>

      <div class="space-y-4">
        <TotalStats />
        <FilamentUsage files={files} settings={settings} />
        <PrinterInfo />
      </div>
    </div>

    <div class="flex justify-end gap-4">
      <CompileButton />
    </div>
  </div>
</div>


<script>
  import { languageStore } from '../../store/language-store';
  import { useTranslations } from '../../i18n/utils';
  
  // Initialize elements
  const thumbnailButton = document.getElementById('thumbnail-button');
  const thumbnailInput = document.getElementById('thumbnail-input') as HTMLInputElement;
  const printSummaryCard = document.getElementById('print-summary-card');

    // Set up file input and button functionality
    if (thumbnailButton && thumbnailInput) {
    thumbnailButton.addEventListener('click', ((e: MouseEvent) => {
      e.preventDefault();
      thumbnailInput.click();
    }) as EventListener);

    // Handle file selection
    thumbnailInput.addEventListener('change', ((e: Event) => {
      const input = e.target as HTMLInputElement;
      const buttonText = document.querySelector('#thumbnail-button span');
      const previewImage = document.getElementById('preview-image') as HTMLImageElement;
      const placeholderIcon = document.getElementById('placeholder-icon');
      const { t } = useTranslations(languageStore.get());
      
      if (input.files && input.files.length > 0) {
        const file = input.files[0];
        const fileName = file.name;
        
        // Update button text
        if (buttonText) {
          buttonText.textContent = fileName;
        }
        input.setAttribute('title', fileName);

        // Show image preview
        if (file.type.startsWith('image/')) {
          const reader = new FileReader();
          
          reader.onload = function(e) {
            if (previewImage && placeholderIcon && e.target?.result) {
              previewImage.src = e.target.result as string;
              previewImage.classList.remove('hidden');
              placeholderIcon.classList.add('hidden');
            }
          };
          
          reader.readAsDataURL(file);
        }
      } else {
        // Reset to initial state
        if (buttonText) {
          buttonText.textContent = t('fileUpload.browse');
        }
        input.setAttribute('title', t('fileUpload.noFileSelected'));
        
        if (previewImage && placeholderIcon) {
          previewImage.src = '';
          previewImage.classList.add('hidden');
          placeholderIcon.classList.remove('hidden');
        }
      }
    }) as EventListener);
  }
  
  function updateTranslations(currentLang: string) {
    const { t } = useTranslations(currentLang);
  
    // Update labels and placeholders
    const elementMappings = [
      { id: 'export-name-label', key: 'printSummary.exportName' },
      { id: 'custom-name-input', key: 'printSummary.exportNamePlaceholder', type: 'placeholder' },
      { id: 'export-name-tips', key: 'printSummary.exportNameTips' },
      { id: 'thumbnail-label', key: 'printSummary.thumbnail' }
    ];
  
    elementMappings.forEach(mapping => {
      const element = document.getElementById(mapping.id);
      if (element) {
        if (mapping.type === 'placeholder') {
          element.setAttribute('placeholder', t(mapping.key));
        } else {
          element.textContent = t(mapping.key);
        }
      }
    });

    // Update file input button
    updateFileInputButton(currentLang);
  }

  function updateFileInputButton(currentLang: string) {
    const { t } = useTranslations(currentLang);
    const buttonText = document.querySelector('#thumbnail-button span');
    if (buttonText && (!thumbnailInput?.files?.length)) {
      buttonText.textContent = t('fileUpload.browse');
    }
  }

  // Set up file input and button functionality
  if (thumbnailButton && thumbnailInput) {
    thumbnailButton.addEventListener('click', ((e: MouseEvent) => {
      e.preventDefault();
      thumbnailInput.click();
    }) as EventListener);

    // Handle file selection
    thumbnailInput.addEventListener('change', ((e: Event) => {
      const input = e.target as HTMLInputElement;
      const buttonText = document.querySelector('#thumbnail-button span');
      const { t } = useTranslations(languageStore.get());
      
      if (input.files && input.files.length > 0) {
        const fileName = input.files[0].name;
        if (buttonText) {
          buttonText.textContent = fileName;
        }
        input.setAttribute('title', fileName);
      } else {
        if (buttonText) {
          buttonText.textContent = t('fileUpload.browse');
        }
        input.setAttribute('title', t('fileUpload.noFileSelected'));
      }
    }) as EventListener);
  }

  // Initial setup
  const initialLang = printSummaryCard?.dataset.initialLang || 'en';
  updateTranslations(initialLang);
  
  // Event listeners for language changes
  window.addEventListener('language-change', ((e: Event) => {
    const customEvent = e as CustomEvent<{ language: string }>;
    const newLang = customEvent.detail.language;
    updateTranslations(newLang);
  }) as EventListener);
  
  window.addEventListener('translation-update', (() => {
    const currentLang = languageStore.get();
    updateTranslations(currentLang);
  }) as EventListener);
  
  // Store subscription
  languageStore.subscribe((newLang) => {
    updateTranslations(newLang);
  });
</script>