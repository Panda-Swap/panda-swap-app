---
import Card from './Card.astro';
import GCodeFileMetadata from './GCodeFileMetadata.astro';
import { filesStore } from '../store/fileStore';

interface Color {
  color: string;
  weight: number;
}

interface FileMetadata {
  plateName: string;
  colors: Color[];
  totalTime: number;
  estimatedTime: number;
}

interface GCodeFile {
  id: string;
  quantity: number;
  content: string;
  metadata: FileMetadata;
}

const initialFiles: readonly GCodeFile[] = filesStore.get();
// Calculate initial totals across all files and quantities
const initialTotals = initialFiles.reduce((acc, file) => {
  file.metadata.colors.forEach(({ color, weight }) => {
    if (!acc[color]) {
      acc[color] = { weight: 0 };
    }
    acc[color].weight += weight * file.quantity;
  });
  return acc;
}, {} as Record<string, { weight: number; }>);

const totalTime = initialFiles.reduce((total, file) => 
  total + (file.metadata.estimatedTime * file.quantity), 0);
---
<!-- Summary Card -->
<div id="print-summary" class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Print Job Summary</h3>
    <div class="grid grid-cols-1 gap-6">
      <div>
        <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          Total Print Time: {Math.floor(totalTime / 60)}h {Math.round(totalTime % 60)}m
        </h4>
        <div class="space-y-2 mt-4" id="total-usage">
        </div>
      </div>
    </div>
  </div>
<!-- File List -->
<div id="file-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-4">
    {initialFiles.map((file) => (
      <div 
        class="file-item bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 transition-all duration-200"
        data-file-id={file.id}
      >
        <div class="flex justify-between items-center mb-4">
          <div class="flex flex-col gap-1">
            <label 
              for={`quantity-${file.id}`} 
              class="text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Print Quantity
            </label>
            <input
              id={`quantity-${file.id}`}
              type="number"
              min="1"
              value={file.quantity}
              data-file-id={file.id}
              class="w-24 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 dark:text-gray-100"
            />
          </div>
          <button
            class="drag-handle p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 cursor-grab active:cursor-grabbing"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
            </svg>
          </button>
        </div>
        
        <div class="gcode-preview-container" data-gcode={encodeURIComponent(file.content)}></div>
        
        <div class="mt-4">
          <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">File: {file.metadata.plateName}</h4>
          <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Filament Usage:</h4>
          <ul class="space-y-2">
            {file.metadata.colors
              .filter(color => color.weight > 0)
              .map(({ color, weight }) => (
              <li class="flex items-center justify-between text-gray-600 dark:text-gray-400 p-2 bg-gray-50 dark:bg-gray-700 rounded">
                <div class="flex items-center gap-2">
                  <div 
                    class="w-6 h-6 rounded border border-gray-200 dark:border-gray-600" 
                    style={`background-color: ${color}`}
                  ></div>
                  <span>{color}</span>
                </div>
                <span>{(weight * file.quantity).toFixed(2)}g</span>
              </li>
            ))}
          </ul>
          <div class="mt-4 grid grid-cols-2 gap-4">
            <div>
              <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Print Time:</h4>
              <p class="text-gray-600 dark:text-gray-400">
                {Math.floor(file.metadata.totalTime / 60)}h {Math.round(file.metadata.totalTime % 60)}m
              </p>
            </div>
            <div>
              <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Total Time:</h4>
              <p class="text-gray-600 dark:text-gray-400">
                {Math.floor(file.metadata.estimatedTime / 60)}h {Math.round(file.metadata.estimatedTime % 60)}m
              </p>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>

<script>
  import { filesStore, type GCodeFile } from '../store/fileStore';
  import Sortable from 'sortablejs';
  import * as GCodePreview from 'gcode-preview';
  import tinycolor from 'tinycolor2';

  interface GCodePreviewOptions {
    canvas: HTMLCanvasElement;
    extrusionColor: string;
    backgroundColor: string;
    initialCameraPosition: [number, number, number];
    buildVolume: {
      x: number;
      y: number;
      z: number;
    };
  }
  
  async function initializeGCodePreview(container: HTMLElement, gcode: string): Promise<void> {
    const canvas = document.createElement('canvas');
    canvas.className = 'w-full h-64 bg-gray-100 dark:bg-gray-800 rounded-lg';
    container.appendChild(canvas);

    const preview = GCodePreview.init({
      canvas,
      extrusionColor: ['#FFFFFF', '#BC0900', '#000000', '#F1F1F1'],
      backgroundColor: '#111827',
      buildVolume: {
      x: 220,
      y: 220,
      z: 250
      }
      } as unknown as GCodePreviewOptions);

    await preview.processGCode(gcode);
  }
  function getContrastColor(hexcolor: string) {
    // Remove the # if present
    const hex = hexcolor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return (yiq >= 128) ? '#000000' : '#FFFFFF';
  }

  function updateSummary(files: readonly GCodeFile[]): void {
    const totalUsageElement = document.getElementById('total-usage');
    if (!totalUsageElement) return;

    // Calculate totals per color across all files
    const totals = files.reduce((acc, file) => {
      file.metadata.colors.forEach(({ color, weight }) => {
        if (!acc[color]) {
          acc[color] = { weight: 0 };
        }
        acc[color].weight += weight * file.quantity;
      });
      return acc;
    }, {} as Record<string, { weight: number; }>);

    // Calculate total print time
    const totalTime = files.reduce((total, file) => 
      total + (file.metadata.estimatedTime * file.quantity), 0);

    // Update the summary HTML
    totalUsageElement.innerHTML = Object.entries(totals)
      .filter(([_, { weight }]) => weight > 0)
      .map(([color, { weight }]) => {
        const tc = tinycolor(color);
        const displayColor = tc.toString('hex');
        const textColor = tc.isLight() ? '#000000' : '#FFFFFF';
        
        return `
          <div class="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded">
            <div class="flex items-center gap-3">
              <div class="relative group">
                <div
                  class="w-8 h-8 rounded-full border border-gray-200 dark:border-gray-600 flex items-center justify-center text-xs font-mono transition-all duration-200"
                  style="background-color: ${displayColor}; color: ${textColor}"
                >
                  <span class="opacity-0 group-hover:opacity-100 transition-opacity">
                    ${displayColor}
                  </span>
                </div>
                <div class="absolute left-1/2 -translate-x-1/2 -bottom-1 opacity-0 group-hover:opacity-100 transition-opacity bg-gray-800 text-white text-xs rounded px-2 py-1 whitespace-nowrap">
                  ${displayColor}
                </div>
              </div>
            </div>
            <span class="text-sm text-gray-600 dark:text-gray-300">${weight.toFixed(2)}g</span>
          </div>
        `;
      })
      .join('');

    // Update total time
    const hours = Math.floor(totalTime / 60);
    const minutes = Math.round(totalTime % 60);
    const totalTimeElement = document.querySelector('#print-summary h4');
    if (totalTimeElement) {
      totalTimeElement.textContent = `Total Print Time: ${hours}h ${minutes}m`;
    }
  }


  function updateFileList(files: readonly GCodeFile[], oldFiles?: readonly GCodeFile[]): void {
    updateSummary(files);
    const fileList = document.getElementById('file-list');
    if (!fileList) return;

    fileList.innerHTML = files.map(file => `
      <div 
        class="file-item bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 transition-all duration-200"
        data-file-id="${file.id}"
      >
        <div class="flex justify-between items-center mb-4">
          <div class="flex flex-col gap-1">
            <label 
              for="quantity-${file.id}" 
              class="text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Print Quantity
            </label>
            <input
              id="quantity-${file.id}"
              type="number"
              min="1"
              value="${file.quantity}"
              data-file-id="${file.id}"
              class="w-24 px-3 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 dark:text-gray-100"
            />
          </div>
          <button
            class="drag-handle p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 cursor-grab active:cursor-grabbing"
            title="Drag to reorder"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
            </svg>
          </button>
        </div>
        <div class="gcode-preview-container" data-gcode="${encodeURIComponent(file.content)}"></div>
        <div class="mt-4">
          <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">File: ${file.metadata.plateName}</h4>
          <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Colors Used:</h4>
          <ul class="space-y-2">
            ${file.metadata.colors.map(({ color, weight }) => `
              <li class="flex items-center justify-between text-gray-600 dark:text-gray-400">
                <div class="flex items-center gap-2">
                  <div 
                    class="w-6 h-6 rounded border border-gray-200 dark:border-gray-600" 
                    style="background-color: ${color}"
                  ></div>
                  <span>${color}</span>
                </div>
                <span>${weight.toFixed(2)}g</span>
              </li>
            `).join('')}
          </ul>
          <div class="mt-2 grid grid-cols-2 gap-4">
            <div>
              <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Print Time:</h4>
              <p class="text-gray-600 dark:text-gray-400">
                ${Math.floor(file.metadata.totalTime / 60)}h ${Math.round(file.metadata.totalTime % 60)}m
              </p>
            </div>
            <div>
              <h4 class="font-medium text-gray-700 dark:text-gray-300 mb-2">Total Time:</h4>
              <p class="text-gray-600 dark:text-gray-400">
                ${Math.floor(file.metadata.estimatedTime / 60)}h ${Math.round(file.metadata.estimatedTime % 60)}m
              </p>
            </div>
          </div>
        </div>
      </div>
    `).join('');

    // Initialize GCodePreview for each container
    document.querySelectorAll('.gcode-preview-container').forEach(container => {
      const encodedGcode = container.getAttribute('data-gcode');
      if (!encodedGcode) return;
      
      const gcode = decodeURIComponent(encodedGcode);
      initializeGCodePreview(container as HTMLElement, gcode).catch(console.error);
    });

    initializeSortable();
  }
  
  function initializeSortable(): void {
    const fileList = document.getElementById('file-list');
    if (!fileList) return;

    // Remove any existing Sortable instance
    const oldInstance = Sortable.get(fileList);
    if (oldInstance) {
      oldInstance.destroy();
    }

    new Sortable(fileList, {
      animation: 150,
      handle: '.drag-handle',
      draggable: '.file-item',
      ghostClass: 'opacity-50',
      chosenClass: 'opacity-60',
      dragClass: 'shadow-2xl',
      forceFallback: true,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: true,
      swapThreshold: 0.65,
      onStart: function (evt) {
        document.body.style.cursor = 'grabbing';
      },
      onEnd: function (evt) {
        document.body.style.cursor = 'default';
        const files = [...filesStore.get()];
        const newFiles = Array.from(evt.to.children).map((el) => {
          const fileId = el.getAttribute('data-file-id');
          return files.find(f => f.id === fileId)!;
        });
        filesStore.set(newFiles);
      }
    });
  }

  // Initialize subscription
  filesStore.subscribe(updateFileList);

  // Initialize Sortable on load
  document.addEventListener('astro:page-load', () => {
    initializeSortable();
  });

// Handle quantity changes
  document.addEventListener('change', (e: Event) => {
    const target = e.target as HTMLInputElement;
    if (target.matches('input[type="number"][data-file-id]')) {
      const fileId = target.dataset.fileId;
      const quantity = parseInt(target.value);
      
      if (fileId) {
        const files = [...filesStore.get()];
        const newFiles = files.map(file => 
          file.id === fileId ? { ...file, quantity } : file
        );
        filesStore.set(newFiles);
      }
    }
  });
  filesStore.subscribe(updateFileList);
</script>

<style is:global>
  .sortable-fallback {
    @apply pointer-events-none opacity-60;
  }
  
  .sortable-ghost {
    @apply opacity-40 bg-blue-50 dark:bg-blue-900;
  }

  .sortable-drag {
    @apply cursor-grabbing;
  }
</style>