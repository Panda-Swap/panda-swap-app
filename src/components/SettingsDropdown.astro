---
import { settingsStore, type Settings } from '../store/settings-store';

const initialSettings = settingsStore.get();
---

<div class="relative" id="settings-menu">
  <button
    type="button"
    class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors duration-200 ease-in-out"
    aria-label="Settings"
    id="settings-button"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5"
      viewBox="0 0 20 20"
      fill="currentColor"
    >
      <path
        fill-rule="evenodd"
        d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
        clip-rule="evenodd"
      />
    </svg>
  </button>

  <div
    id="settings-panel"
    class="absolute right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 hidden z-50 border border-gray-200 dark:border-gray-700"
  >
    <div class="space-y-4">
      <div>
        <h3 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">Preview Settings</h3>
        <div class="space-y-2">
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Show as Tubes</span>
            <input
              type="checkbox"
              name="renderTubes"
              checked={initialSettings.preview.renderTubes}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="preview"
            />
          </label>
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Show Build Volume</span>
            <input
              type="checkbox"
              name="buildArea"
              checked={initialSettings.preview.buildArea}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="preview"
            />
          </label>
        </div>
      </div>

      <div>
        <h3 class="text-sm font-semibold text-gray-900 dark:text-white mb-2">Display Settings</h3>
        <div class="space-y-2">
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Hide Empty Filaments</span>
            <input
              type="checkbox"
              name="hideEmptyFilaments"
              checked={initialSettings.display.hideEmptyFilaments}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="display"
            />
          </label>
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Show Total Cost</span>
            <input
              type="checkbox"
              name="showTotalCost"
              checked={initialSettings.display.showTotalCost}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="display"
            />
          </label>
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Show Printer Info</span>
            <input
              type="checkbox"
              name="showPrinterInfo"
              checked={initialSettings.display.showPrinterInfo}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="display"
            />
          </label>
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Compact Mode</span>
            <input
              type="checkbox"
              name="compactMode"
              checked={initialSettings.display.compactMode}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="display"
            />
          </label>
          <label class="flex items-center justify-between">
            <span class="text-sm text-gray-700 dark:text-gray-300">Show Preview</span>
            <input
              type="checkbox"
              name="showPreview"
              checked={initialSettings.display.showPreview}
              class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500"
              data-settings-group="display"
            />
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { initSettings, settingsStore, updateSettings } from '../store/settings-store';

  function setupSettingsMenu() {
    const settingsButton = document.getElementById('settings-button');
    const settingsPanel = document.getElementById('settings-panel');
    const settingsMenu = document.getElementById('settings-menu');

    if (!settingsButton || !settingsPanel || !settingsMenu) {
      console.error('Settings menu elements not found');
      return;
    }

    function togglePanel(event: Event) {
      event.stopPropagation();
      settingsPanel.classList.toggle('hidden');
    }

    function handleClickOutside(event: MouseEvent) {
      if (!settingsMenu.contains(event.target as Node)) {
        settingsPanel.classList.add('hidden');
      }
    }

    // Remove existing event listeners if any
    settingsButton.removeEventListener('click', togglePanel);
    document.removeEventListener('click', handleClickOutside);

    // Add event listeners
    settingsButton.addEventListener('click', togglePanel);
    document.addEventListener('click', handleClickOutside);

    // Handle settings changes
    settingsPanel.addEventListener('change', (event) => {
      const target = event.target as HTMLInputElement;
      if (!target.name || !target.dataset.settingsGroup) return;

      const settingsGroup = target.dataset.settingsGroup as 'preview' | 'display';
      const currentSettings = settingsStore.get();
      const value = target.type === 'checkbox' ? target.checked : 
                   target.type === 'range' ? parseFloat(target.value) : 
                   target.value;

      const updatedSettings = {
        [settingsGroup]: {
          ...currentSettings[settingsGroup],
          [target.name]: value
        }
      };

      updateSettings(updatedSettings);
    });

    // Subscribe to settings changes
    settingsStore.subscribe((settings) => {
      // Update preview settings inputs
      Object.entries(settings.preview).forEach(([key, value]) => {
        const input = settingsPanel.querySelector(
          `[name="${key}"][data-settings-group="preview"]`
        ) as HTMLInputElement;
        if (input) {
          input.checked = value as boolean;
        }
      });

      // Update display settings inputs
      Object.entries(settings.display).forEach(([key, value]) => {
        const input = settingsPanel.querySelector(
          `[name="${key}"][data-settings-group="display"]`
        ) as HTMLInputElement;
        if (input) {
          input.checked = value as boolean;
        }
      });
    });
  }

  // Initialize settings when the component mounts
  document.addEventListener('astro:page-load', () => {
    initSettings();
    setupSettingsMenu();
  });

  // Also set up on initial load in case astro:page-load doesn't fire
  if (document.readyState === 'complete') {
    setupSettingsMenu();
  } else {
    window.addEventListener('load', setupSettingsMenu);
  }
</script>