---
import { getCurrentLanguage, useTranslations } from '../i18n/utils';

interface Props {
  title: string;
  description?: string;
  lang?: string;
}

// Get current language from store
const currentLang = getCurrentLanguage();
const { t } = useTranslations(currentLang);

const {
  title,
  description = t('app.description')
} = Astro.props;

// Handle title translation
// Simply use the title passed from the page since it's already translated
const pageTitle = title;

// Debug info
console.log('Debug info:', {
  currentLang,
  providedTitle: title,
  finalPageTitle: pageTitle
});
---

<!doctype html>
<html lang={currentLang} class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta  data-i18n="app.description" name="description" content={description} />
    <title data-i18n="app.title">{pageTitle}</title>
    <meta data-i18n="app.title" name="title" content={pageTitle} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    
    <!-- Add listener for language changes -->
    <script>
      document.addEventListener('astro:page-load', () => {
        window.addEventListener('language-change', () => {
          window.location.reload();
        });
      });
    </script>
    
    <!-- Theme Script -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      }
    </script>
  </head>
  <body class="h-full bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white antialiased">
    <slot />
  </body>
</html>